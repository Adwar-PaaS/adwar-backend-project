generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  DRIVER
  PACKER
  ACCOUNTANT
  PICKER
  OPERATOR
  CUSTOMER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WarehouseStatus {
  OPEN
  EMPTY
  FULL
  CLOSED
  UNDER_MAINTENANCE
}

enum EntityType {
  USER
  TENANT
  WAREHOUSE
  ORDER
  DRIVER
  DRIVER_ORDER
  TENANT_ORDER
  TENANT_CUSTOMER
  CUSTOMER_ORDER
  TENANT_WAREHOUSE
}

enum ActionType {
  ALL
  CREATE
  READ
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  fullName String
  phone    String?
  status   Status  @default(ACTIVE)

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  memberships    UserTenant[]
  createdTenants Tenant[]     @relation("UserCreatedTenants")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tenant {
  id      String  @id @default(uuid())
  name    String
  slug    String  @unique
  status  Status  @default(ACTIVE)
  logoUrl String?
  address String?
  email   String? @unique
  phone   String?

  createdById String
  createdBy   User   @relation("UserCreatedTenants", fields: [createdById], references: [id])

  memberships UserTenant[]
  warehouses  Warehouse[]
  roles       Role[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UserTenant {
  id      String  @id @default(uuid())
  isOwner Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([warehouseId])
}

model Role {
  id   String   @id @default(uuid())
  name RoleName

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  users       User[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name])
  @@index([tenantId])
}

model RolePermission {
  id     String @id @default(uuid())
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  entityType EntityType
  actionType ActionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, entityType, actionType])
  @@index([roleId])
}

model Warehouse {
  id           String          @id @default(uuid())
  location     String
  capacity     Int
  currentStock Int             @default(0)
  status       WarehouseStatus @default(OPEN)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  memberships UserTenant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId])
}
