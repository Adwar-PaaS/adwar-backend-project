generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String
  fullName       String
  phone          String?
  status         Status       @default(ACTIVE)
  roleId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  createdTenants Tenant[]     @relation("UserCreatedTenants")
  role           Role         @relation(fields: [roleId], references: [id])
  memberships    UserTenant[]
}

model Tenant {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  status      Status       @default(ACTIVE)
  logoUrl     String?
  address     String?
  email       String?      @unique
  phone       String?
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  roles       Role[]
  createdBy   User         @relation("UserCreatedTenants", fields: [createdById], references: [id])
  memberships UserTenant[]
  warehouses  Warehouse[]
}

model UserTenant {
  id          String     @id @default(uuid())
  isOwner     Boolean    @default(false)
  userId      String
  tenantId    String
  warehouseId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  permissions UserPermission[]

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([warehouseId])
}

model Role {
  id          String           @id @default(uuid())
  name        RoleName
  tenantId    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  tenant      Tenant?          @relation(fields: [tenantId], references: [id])
  permissions RolePermission[]
  users       User[]

  @@index([tenantId])
}

model RolePermission {
  id         String       @id @default(uuid())
  roleId     String
  entityType EntityType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  actionType ActionType[] @default([])
  role       Role         @relation(fields: [roleId], references: [id])

  @@unique([roleId, entityType])
  @@index([roleId])
}

model UserPermission {
  id         String       @id @default(uuid())
  userTenantId String
  entityType EntityType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  actionType ActionType[] @default([])
  
  userTenant UserTenant   @relation(fields: [userTenantId], references: [id])

  @@unique([userTenantId, entityType])
  @@index([userTenantId])
}

model Warehouse {
  id           String          @id @default(uuid())
  location     String
  capacity     Int
  currentStock Int             @default(0)
  status       WarehouseStatus @default(OPEN)
  tenantId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  name         String
  memberships  UserTenant[]
  tenant       Tenant          @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  DRIVER
  PACKER
  ACCOUNTANT
  PICKER
  OPERATION
  CUSTOMER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WarehouseStatus {
  OPEN
  EMPTY
  FULL
  CLOSED
  UNDER_MAINTENANCE
}

enum EntityType {
  USER
  TENANT
  WAREHOUSE
  ORDER
  DRIVER
  DRIVER_ORDER
  TENANT_ORDER
  TENANT_CUSTOMER
  CUSTOMER_ORDER
  TENANT_WAREHOUSE
}

enum ActionType {
  ALL
  CREATE
  READ
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
}
