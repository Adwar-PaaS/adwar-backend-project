generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String
  fullName       String
  phone          String?
  status         Status       @default(ACTIVE)
  roleId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  createdTenants Tenant[]     @relation("UserCreatedTenants")
  role           Role         @relation(fields: [roleId], references: [id])
  memberships    UserTenant[]
  orders         Order[]      @relation("DriverOrders")
}

model Tenant {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  status      Status       @default(ACTIVE)
  logoUrl     String?
  address     String?
  email       String?      @unique
  phone       String?
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  roles       Role[]
  createdBy   User         @relation("UserCreatedTenants", fields: [createdById], references: [id])
  memberships UserTenant[]
  warehouses  Warehouse[]
}

model UserTenant {
  id          String           @id @default(uuid())
  isOwner     Boolean          @default(false)
  userId      String
  tenantId    String
  warehouseId String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  warehouse   Warehouse?       @relation(fields: [warehouseId], references: [id])
  permissions UserPermission[]

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([warehouseId])
}

model Role {
  id          String           @id @default(uuid())
  name        RoleName
  tenantId    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  tenant      Tenant?          @relation(fields: [tenantId], references: [id])
  permissions RolePermission[]
  users       User[]

  @@index([tenantId])
}

model RolePermission {
  id         String       @id @default(uuid())
  roleId     String
  entityType EntityType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  actionType ActionType[] @default([])
  role       Role         @relation(fields: [roleId], references: [id])

  @@unique([roleId, entityType])
  @@index([roleId])
}

model UserPermission {
  id           String       @id @default(uuid())
  userTenantId String
  entityType   EntityType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  actionType   ActionType[] @default([])

  userTenant UserTenant @relation(fields: [userTenantId], references: [id])

  @@unique([userTenantId, entityType])
  @@index([userTenantId])
}

model Warehouse {
  id           String          @id @default(uuid())
  location     String
  capacity     Int
  currentStock Int             @default(0)
  status       WarehouseStatus @default(OPEN)
  tenantId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  name         String
  memberships  UserTenant[]
  tenant       Tenant          @relation(fields: [tenantId], references: [id])
  orders       Order[]

  @@index([tenantId])
}

model Order {
  id           String        @id @default(uuid())
  sku          String        @unique
  totalPrice   Float?
  quantity     Int
  failedReason FailedReason?

  deliveryLocation String? // client location
  merchantLocation String? // vendor location (seller)
  description      String?
  customerName     String?
  customerPhone    String?

  status OrderStatus @default(PENDING)

  paymentType           String?
  COD_Collection_Method String?
  COD_Amount            Float?
  notes                 String?

  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])

  driverId   String?
  driver     User?       @relation("DriverOrders", fields: [driverId], references: [id])

  assignedAt DateTime?
  pickedAt  DateTime?

  deliveredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([warehouseId])
  @@index([status])
  @@index([createdAt])
}

model Attachment {
  id          String         @id @default(uuid())
  url         String
  type        AttachmentType @default(IMAGE)
  relatedId   String
  relatedType RelatedType
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  @@index([relatedId, relatedType])
}

enum RelatedType {
  USER
  TENANT
  WAREHOUSE
  ORDER
  DRIVER
  ROLE
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum OrderStatus {
  PENDING
  APPROVED
  ASSIGNED_FOR_PICKUP
  PICKED_UP
  RECEIVED_IN_WAREHOUSE
  STORED_ON_SHELVES
  READY_FOR_DISPATCH
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RESCHEDULED
  CANCELLED
  RETURNED_TO_OPERATION
  READY_TO_RETURN_TO_ORIGIN
  RETURNED_TO_ORIGIN
}

enum FailedReason {
  CUSTOMER_NOT_AVAILABLE
  WRONG_ADDRESS
  NO_ANSWER
  DAMAGED_PACKAGE
  OUT_OF_COVERAGE_AREA
  MOBILE_SWITCHED_OFF
  OTHER
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  DRIVER
  PACKER
  ACCOUNTANT
  PICKER
  OPERATION
  CUSTOMER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WarehouseStatus {
  OPEN
  EMPTY
  FULL
  CLOSED
  UNDER_MAINTENANCE
}

enum EntityType {
  USER
  TENANT
  WAREHOUSE
  ORDER
  DRIVER
  ROLE
  DRIVER_ORDER
  TENANT_ORDER
  TENANT_CUSTOMER
  CUSTOMER_ORDER
  TENANT_WAREHOUSE
}

enum ActionType {
  ALL
  CREATE
  READ
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
}
