  generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  SUPERADMIN
  ADMIN
  DRIVER
  PACKER
  ACCOUNTANT
  PICKER
  OPERATION
  CUSTOMER
}

enum Status {
  Activate
  Deactivate
}

enum WarehouseStatus {
  OPEN_TO_ADD
  EMPTY
  FULL
  CLOSED
  UNDER_MAINTENANCE
}

enum EntityType {
  USER
  TENANT
  WAREHOUSE
  ORDER
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  VIEW
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  fullName String
  phone    String?
  status   Status  @default(Activate)

  userTenants    UserTenant[]
  createdTenants Tenant[]     @relation("UserCreatedTenants")
  userRoles      UserRole[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([status])
  @@index([email, status])
}

model Tenant {
  id      String  @id @default(uuid())
  name    String
  slug    String  @unique
  status  Status  @default(Activate)
  logoUrl String?
  address String?
  email   String? @unique
  phone   String?

  createdBy String
  creator   User   @relation("UserCreatedTenants", fields: [createdBy], references: [id])

  userTenants UserTenant[]
  roles       Role[]
  warehouses  Warehouse[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  @@index([status])
  @@index([slug])
}

model UserTenant {
  id String @id @default(uuid())

  isOwner Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, tenantId])
  @@index([userId])
  @@index([tenantId])
  @@index([warehouseId])
}

model Role {
  id   String   @id @default(uuid())
  name RoleName

  tenantId String?   // null â†’ global roles (SUPERADMIN, CUSTOMER)
  tenant   Tenant?   @relation(fields: [tenantId], references: [id])

  userRoles   UserRole[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name]) // prevent duplicate role names per tenant
}

model UserRole {
  id String @id @default(uuid())

  userId String
  user   User @relation(fields: [userId], references: [id])

  roleId String
  role   Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RolePermission {
  id     String @id @default(uuid())
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  entity   EntityType
  action   ActionType
  entityId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, entity, action, entityId])
}

model Warehouse {
  id           String          @id @default(uuid())
  location     String
  currentStock Int             @default(0)
  capacity     Int?
  status       WarehouseStatus @default(OPEN_TO_ADD)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  userTenants UserTenant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([tenantId])
  @@index([status])
  @@index([location, tenantId])
}
