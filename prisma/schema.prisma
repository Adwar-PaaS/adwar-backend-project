generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid()) @db.Uuid
  email             String        @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  status            Status        @default(ACTIVE)
  customerSubdomain String?       @unique
  businessType      BusinessType? @default(TENANT)
  roleId            String        @db.Uuid
  isVerified        Boolean       @default(false)
  lastLoginAt       DateTime?
  joinedAt          DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?

  // Relations
  role                   Role                    @relation(fields: [roleId], references: [id])
  createdTenants         Tenant[]                @relation("UserCreatedTenants")
  memberships            UserTenant[]
  addresses              UserAddress[]
  customerOrders         Order[]                 @relation("CustomerOrders")
  pickUpDriver           PickUp[]                @relation("PickUpDriver")
  customerBranches       Branch[]                @relation("CustomerBranch")
  auditLogs              AuditLog[]              @relation("UserAuditLogs")
  sentPickUpRequests     PickUpRequest[]         @relation("PickUpRequester")
  receivedPickUpRequests PickUpRequest[]         @relation("PickUpResponder")
  sentRequests           Request[]               @relation("RequestSender")
  receivedRequests       Request[]               @relation("RequestResponder")
  sentNotifications      Notification[]          @relation("SentNotifications")
  receivedNotifications  NotificationRecipient[] @relation("ReceivedNotifications")
  updatorTrackings       TrackingEvent[]         @relation("TrackingUpdater")
  attachmentUploads      Attachment[]            @relation("AttachmentUploader")
  orderNotes             OrderNote[]             @relation("OrderNoteAuthor")

  @@index([email])
  @@index([customerSubdomain])
  @@index([status])
  @@index([businessType])
  @@index([roleId])
  @@index([deletedAt])
  @@map("users")
}

model Tenant {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  slug          String    @unique
  subdomain     String?   @unique // Full subdomain: slug.website-domain.com
  description   String?
  status        Status    @default(ACTIVE)
  logoUrl       String?
  website       String?
  email         String? // Removed @unique - handle in app logic
  phone         String?
  taxNumber     String? // Removed @unique - handle in app logic
  licenseNumber String? // Removed @unique - handle in app logic
  creatorId     String    @db.Uuid
  addressId     String?   @db.Uuid // Removed @unique to allow address reuse
  settings      Json? // For tenant-specific configurations
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  creator     User         @relation("UserCreatedTenants", fields: [creatorId], references: [id], onDelete: Restrict)
  address     Address?     @relation("TenantAddress", fields: [addressId], references: [id], onDelete: SetNull)
  roles       Role[]
  branches    Branch[]
  memberships UserTenant[]

  @@index([slug])
  @@index([creatorId])
  @@index([status])
  @@index([deletedAt])
  @@map("tenants")
}

model UserTenant {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  tenantId  String    @db.Uuid
  branchId  String?   @db.Uuid
  isActive  Boolean   @default(true)
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch      Branch?          @relation(fields: [branchId], references: [id], onDelete: SetNull)
  permissions UserPermission[]

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([branchId])
  @@index([deletedAt])
  @@map("user_tenants")
}

model Role {
  id        String    @id @default(uuid()) @db.Uuid
  name      RoleName  @default(CUSTOMER)
  tenantId  String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  tenant      Tenant?          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions RolePermission[]
  users       User[]

  @@index([tenantId])
  @@index([name])
  @@index([deletedAt])
  @@map("roles")
}

model RolePermission {
  id         String       @id @default(uuid()) @db.Uuid
  roleId     String       @db.Uuid
  entityType EntityType
  actions    ActionType[] @default([])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, entityType])
  @@index([roleId])
  @@index([entityType])
  @@index([deletedAt])
  @@map("role_permissions")
}

model UserPermission {
  id           String       @id @default(uuid()) @db.Uuid
  userTenantId String       @db.Uuid
  entityType   EntityType
  actions      ActionType[] @default([])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?

  // Relations
  userTenant UserTenant @relation(fields: [userTenantId], references: [id], onDelete: Cascade)

  @@unique([userTenantId, entityType])
  @@index([userTenantId])
  @@index([entityType])
  @@index([deletedAt])
  @@map("user_permissions")
}

model Address {
  id           String    @id @default(uuid()) @db.Uuid
  label        String?
  address1     String
  address2     String?
  district     String?
  city         String
  state        String?
  country      String
  postalCode   String?
  latitude     Decimal?  @db.Decimal(10, 8)
  longitude    Decimal?  @db.Decimal(11, 8)
  isActive     Boolean   @default(true)
  landmark     String?
  instructions String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  userAddresses UserAddress[]
  tenantAddress Tenant[]      @relation("TenantAddress") // Multiple tenants can use same address
  branches      Branch[]
  pickups       PickUp[]      @relation("PickUpAddress")

  shipmentsAsSender    Shipment[] @relation("SenderAddress")
  shipmentsAsConsignee Shipment[] @relation("ConsigneeAddress")

  @@index([country, city])
  @@index([isActive])
  @@index([latitude, longitude])
  @@index([deletedAt])
  @@map("addresses")
}

model UserAddress {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @db.Uuid
  addressId String      @db.Uuid
  type      AddressType @default(HOME)
  isPrimary Boolean     @default(false)
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@unique([userId, addressId])
  @@index([userId])
  @@index([type])
  @@index([isPrimary])
  @@index([deletedAt])
  @@map("user_addresses")
}

model Branch {
  id             String         @id @default(uuid()) @db.Uuid
  name           String
  code           String         @default(dbgenerated("gen_code('BR'::text)"))
  status         BranchStatus   @default(ACTIVE)
  tenantId       String?        @db.Uuid
  customerId     String?        @db.Uuid
  addressId      String         @db.Uuid
  creatorId      String?        @db.Uuid
  type           BranchType     @default(MAIN)
  category       BranchCategory @default(WAREHOUSE)
  capacity       Int?
  operatingHours Json?
  contactInfo    Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  // Relations
  tenant      Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer    User?        @relation("CustomerBranch", fields: [customerId], references: [id], onDelete: SetNull)
  address     Address      @relation(fields: [addressId], references: [id], onDelete: Restrict)
  userTenants UserTenant[]
  pickups     PickUp[]     @relation("PickupBranch")

  @@unique([tenantId, code])
  @@index([tenantId])
  @@index([customerId])
  @@index([addressId])
  @@index([status])
  @@index([type])
  @@index([deletedAt])
  @@map("branches")
}

model Order {
  id                  String         @id @default(uuid()) @db.Uuid
  orderNumber         String         @unique
  referenceNumber     String?
  totalWeight         Decimal?       @db.Decimal(10, 3)
  totalValue          Decimal?       @db.Decimal(12, 2)
  packageCount        Int            @default(1)
  specialInstructions String?
  status              OrderStatus    @default(DRAFT) // Added DRAFT status
  failedReason        FailedReason?
  priority            PriorityStatus @default(NORMAL)
  customerId          String?        @db.Uuid
  branchId            String?        @db.Uuid
  routeId             String?        @db.Uuid
  estimatedDelivery   DateTime?
  scheduledDelivery   DateTime?
  deliveredAt         DateTime?
  assignedAt          DateTime?
  pickedAt            DateTime?
  cancelledAt         DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?

  // Relations
  customer       User?           @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: SetNull)
  payment        Payment?
  pickUpOrders   PickUpOrder[]
  shipmentOrders ShipmentOrder[]
  items          OrderItem[]
  tracking       TrackingEvent[]
  notes          OrderNote[]

  @@index([orderNumber])
  @@index([customerId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([estimatedDelivery])
  @@index([deliveredAt])
  @@index([deletedAt])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(uuid()) @db.Uuid
  orderId     String   @db.Uuid
  sku         String
  name        String
  description String?
  category    String?
  quantity    Int      @default(1)
  unitPrice   Decimal  @default(0) @db.Decimal(10, 2)
  total       Decimal  @default(0) @db.Decimal(12, 2)
  weight      Decimal? @db.Decimal(8, 3)
  dimensions  Json?
  isFragile   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, sku])
  @@index([orderId])
  @@index([sku])
  @@map("order_items")
}

model Payment {
  id                     String        @id @default(uuid()) @db.Uuid
  orderId                String        @unique @db.Uuid
  paymentMethod          PaymentMethod @default(CASH)
  codAmount              Decimal?      @db.Decimal(12, 2)
  shippingCost           Decimal       @default(0) @db.Decimal(10, 2)
  driverCost             Decimal       @default(0) @db.Decimal(10, 2)
  insuranceFees          Decimal       @default(0) @db.Decimal(10, 2)
  serviceFees            Decimal       @default(0) @db.Decimal(10, 2)
  creditFees             Decimal       @default(0) @db.Decimal(10, 2)
  extraFees              Decimal       @default(0) @db.Decimal(10, 2)
  vatAmount              Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount         Decimal       @default(0) @db.Decimal(10, 2)
  totalAmount            Decimal       @db.Decimal(12, 2)
  paidAmount             Decimal       @default(0) @db.Decimal(12, 2)
  remainingAmount        Decimal       @default(0) @db.Decimal(12, 2)
  paymentReferenceNumber String?
  paymentCardType        String?
  approvalCode           String?
  transactionDate        DateTime?
  transactionType        String?
  transactionSource      String?
  transactionPercentage  Decimal?      @db.Decimal(5, 2)
  status                 PaymentStatus @default(PENDING)
  dueDate                DateTime?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  deletedAt              DateTime?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([paymentMethod])
  @@index([dueDate])
  @@index([transactionDate])
  @@index([deletedAt])
  @@map("payments")
}

model TrackingEvent {
  id        String      @id @default(uuid()) @db.Uuid
  orderId   String      @db.Uuid
  updaterId String?     @db.Uuid
  status    OrderStatus
  location  String?
  latitude  Decimal?    @db.Decimal(10, 8)
  longitude Decimal?    @db.Decimal(11, 8)
  notes     String?
  isPublic  Boolean     @default(true)
  eventType String?
  metadata  Json?
  timestamp DateTime    @default(now())
  createdAt DateTime    @default(now())

  // Relations
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  updater User? @relation("TrackingUpdater", fields: [updaterId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([updaterId])
  @@index([status])
  @@index([timestamp])
  @@index([eventType])
  @@map("tracking_events")
}

model OrderNote {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  content   String
  private   Boolean  @default(false)
  authorId  String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order  Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  author User? @relation("OrderNoteAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([authorId])
  @@index([private])
  @@map("order_notes")
}

model PickUp {
  id           String       @id @default(uuid()) @db.Uuid
  pickupNumber String       @unique @default(dbgenerated("gen_code('PICK'::text)"))
  status       PickUpStatus @default(CREATED)
  type         PickupType   @default(REGULAR)
  scheduledFor DateTime?
  completedAt  DateTime?
  notes        String?
  driverId     String?      @db.Uuid
  branchId     String?      @db.Uuid
  addressId    String?      @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?

  // Relations
  orders    PickUpOrder[]
  requests  PickUpRequest[]
  shipments Shipment[]      @relation("PickUpShipments")
  driver    User?           @relation("PickUpDriver", fields: [driverId], references: [id], onDelete: SetNull)
  address   Address?        @relation("PickUpAddress", fields: [addressId], references: [id], onDelete: SetNull)
  branch    Branch?         @relation("PickupBranch", fields: [branchId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([scheduledFor])
  @@index([driverId])
  @@index([branchId])
  @@index([addressId])
  @@index([deletedAt])
  @@map("pickups")
}

model PickUpRequest {
  id          String        @id @default(uuid()) @db.Uuid
  pickupId    String        @db.Uuid
  requestedBy String        @db.Uuid
  respondedBy String?       @db.Uuid
  status      RequestStatus @default(PENDING)
  requestedAt DateTime      @default(now())
  respondedAt DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  // Relations
  pickup    PickUp @relation(fields: [pickupId], references: [id], onDelete: Cascade)
  requester User   @relation("PickUpRequester", fields: [requestedBy], references: [id], onDelete: Cascade)
  responder User?  @relation("PickUpResponder", fields: [respondedBy], references: [id], onDelete: SetNull)

  @@index([pickupId])
  @@index([requestedBy])
  @@index([respondedBy])
  @@index([status])
  @@index([requestedAt])
  @@index([deletedAt])
  @@map("pickup_requests")
}

model PickUpOrder {
  id        String    @id @default(uuid()) @db.Uuid
  pickupId  String    @db.Uuid
  orderId   String    @db.Uuid
  sequence  Int       @default(1)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // Relations
  pickup PickUp @relation(fields: [pickupId], references: [id], onDelete: Cascade)
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([pickupId, orderId])
  @@index([pickupId])
  @@index([orderId])
  @@index([sequence])
  @@index([deletedAt])
  @@map("pickup_orders")
}

model Shipment {
  id                  String         @id @default(uuid()) @db.Uuid
  shipmentNumber      String         @unique
  pickupId            String?        @db.Uuid
  originCountry       String
  originCity          String
  destinationCountry  String
  destinationCity     String
  serviceType         ServiceType    @default(STANDARD)
  shipmentValue       Decimal        @default(0) @db.Decimal(12, 2)
  declaredValue       Decimal?       @db.Decimal(12, 2)
  weight              Decimal        @db.Decimal(10, 3)
  volumetricWeight    Decimal?       @db.Decimal(10, 3)
  dimensions          Json?
  numberOfItems       Int            @default(1)
  senderAccountNumber String?
  senderName          String
  senderBusinessName  String?
  senderPhone         String
  senderEmail         String?
  consigneeName       String
  consigneePhone1     String
  consigneePhone2     String?
  consigneeEmail      String?
  senderAddressId     String         @db.Uuid
  consigneeAddressId  String         @db.Uuid
  specialInstructions String?
  insuranceRequired   Boolean        @default(false)
  signatureRequired   Boolean        @default(false)
  fragileItems        Boolean        @default(false)
  status              ShipmentStatus @default(PENDING)
  estimatedDelivery   DateTime?
  actualDelivery      DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?

  // Relations
  pickup           PickUp?         @relation("PickUpShipments", fields: [pickupId], references: [id], onDelete: SetNull)
  senderAddress    Address         @relation("SenderAddress", fields: [senderAddressId], references: [id], onDelete: Restrict)
  consigneeAddress Address         @relation("ConsigneeAddress", fields: [consigneeAddressId], references: [id], onDelete: Restrict)
  shipmentOrders   ShipmentOrder[]

  @@index([shipmentNumber])
  @@index([pickupId])
  @@index([status])
  @@index([serviceType])
  @@index([originCountry, originCity])
  @@index([destinationCountry, destinationCity])
  @@index([estimatedDelivery])
  @@index([deletedAt])
  @@map("shipments")
}

model ShipmentOrder {
  id         String @id @default(uuid()) @db.Uuid
  shipmentId String @db.Uuid
  orderId    String @db.Uuid

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([shipmentId, orderId])
  @@index([orderId])
  @@index([shipmentId])
  @@map("shipment_orders")
}

model Notification {
  id           String                @id @default(uuid()) @db.Uuid
  senderId     String?               @db.Uuid
  title        String
  message      String
  relatedId    String?               @db.Uuid
  relatedType  EntityType?
  category     NotificationCategory  @default(INFO)
  channels     NotificationChannel[] @default([])
  priority     PriorityStatus        @default(MEDIUM)
  metadata     Json?
  templateId   String?
  scheduledFor DateTime?
  expiresAt    DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  deletedAt    DateTime?

  // Relations
  sender     User?                   @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  recipients NotificationRecipient[]

  @@index([relatedId, relatedType])
  @@index([category])
  @@index([priority])
  @@index([scheduledFor])
  @@index([expiresAt])
  @@index([deletedAt])
  @@map("notifications")
}

model NotificationRecipient {
  id             String               @id @default(uuid()) @db.Uuid
  notificationId String               @db.Uuid
  recipientId    String               @db.Uuid
  channel        NotificationChannel?
  readAt         DateTime?
  deliveredAt    DateTime?
  failedAt       DateTime?
  errorMessage   String?
  createdAt      DateTime             @default(now())

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  recipient    User         @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([notificationId, recipientId, channel])
  @@index([recipientId])
  @@index([readAt])
  @@index([deliveredAt])
  @@index([channel])
  @@map("notification_recipients")
}

model Attachment {
  id           String         @id @default(uuid()) @db.Uuid
  filename     String
  originalName String
  url          String
  mimeType     String
  fileSize     Int
  type         AttachmentType @default(OTHER)
  relatedId    String         @db.Uuid
  relatedType  EntityType
  metadata     Json?
  uploadedBy   String?        @db.Uuid
  isPublic     Boolean        @default(false)
  expiresAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  // Relations
  uploader User? @relation("AttachmentUploader", fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@index([relatedId, relatedType])
  @@index([type])
  @@index([uploadedBy])
  @@index([isPublic])
  @@index([deletedAt])
  @@map("attachments")
}

model AuditLog {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String?    @db.Uuid
  entityType  EntityType
  entityId    String?    @db.Uuid
  actionType  ActionType
  oldValues   Json?
  newValues   Json?
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())

  // Relations
  user User? @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([actionType])
  @@index([createdAt])
  @@map("audit_logs")
}

model Request {
  id          String         @id @default(uuid()) @db.Uuid
  entityType  EntityType
  entityId    String?        @db.Uuid
  actionType  ActionType
  status      RequestStatus  @default(PENDING)
  reason      String?
  responseMsg String?
  priority    PriorityStatus @default(MEDIUM)
  senderId    String         @db.Uuid
  responderId String?        @db.Uuid
  expiresAt   DateTime?
  processedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  // Relations
  sender    User  @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  responder User? @relation("RequestResponder", fields: [responderId], references: [id], onDelete: SetNull)

  @@index([entityType, entityId])
  @@index([senderId])
  @@index([responderId])
  @@index([status])
  @@index([priority])
  @@index([expiresAt])
  @@index([deletedAt])
  @@map("requests")
}

// Enums
enum Status {
  ACTIVE
  INACTIVE
}

enum BusinessType {
  TENANT
  INDIVIDUAL
  SME
  ENTERPRISE
  GOVERNMENT
}

enum AddressType {
  HOME
  WORK
  OFFICE
  BRANCH
  PICKUP
  DELIVERY
  OTHER
}

enum PriorityStatus {
  LOW
  NORMAL
  MEDIUM
  HIGH
  URGENT
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  COD
  CREDIT
}

enum ServiceType {
  STANDARD
  EXPRESS
  NEXT_DAY
  SAME_DAY
  ECONOMY
  PREMIUM
}

enum NotificationCategory {
  SYSTEM
  INFO
  ACTION
  WARNING
  ERROR
  MARKETING
  PICKUP
  DELIVERY
  PAYMENT
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
  WEBHOOK
  WHATSAPP
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  SIGNATURE
  INVOICE
  RECEIPT
  OTHER
}

enum OrderStatus {
  DRAFT
  CREATED
  PENDING
  APPROVED
  ASSIGNED_FOR_PICKUP
  PICKED_UP
  RECEIVED_IN_WAREHOUSE
  STORED_ON_SHELVES
  READY_FOR_DISPATCH
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RESCHEDULED
  CANCELLED
  RETURNED_TO_OPERATION
  READY_TO_RETURN_TO_ORIGIN
  RETURNED_TO_ORIGIN
}

enum FailedReason {
  CUSTOMER_NOT_AVAILABLE
  WRONG_ADDRESS
  NO_ANSWER
  DAMAGED_PACKAGE
  OUT_OF_COVERAGE_AREA
  MOBILE_SWITCHED_OFF
  CUSTOMER_REFUSED
  INCOMPLETE_ADDRESS
  SECURITY_ISSUE
  WEATHER_CONDITIONS
  VEHICLE_BREAKDOWN
  TRAFFIC_CONGESTION
  OTHER
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  DRIVER
  PACKER
  ACCOUNTANT
  PICKER
  OPERATION
  CUSTOMER
  // BRANCH_MANAGER
  // DISPATCHER
  // FLEET_MANAGER
}

enum EntityType {
  USER
  TENANT
  ORDER
  DRIVER
  ROLE
  PICKUP_REQUEST
  PICKUP
  TENANT_ORDER
  TENANT_CUSTOMER
  CUSTOMER_ORDER
  BRANCH
  SHIPMENT
  PAYMENT
  NOTIFICATION
  ADDRESS
  TRACKING
}

enum ActionType {
  ALL
  CREATE
  READ
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
  APPROVE
  EXPORT
  IMPORT
  REJECT
  ASSIGN
  COMPLETE
  CANCEL
}

enum ShipmentStatus {
  DRAFT
  PENDING
  DISPATCHED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
  LOST
  DAMAGED
}

enum PickupType {
  REGULAR
  EXPRESS
  BULK
  SCHEDULED
  ON_DEMAND
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  CLOSED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_PAID
  OVERDUE
}

enum BranchCategory {
  WAREHOUSE
  RETAIL
  DISTRIBUTION_CENTER
  SORTING_FACILITY
  DARK_STORE
}

enum BranchType {
  MAIN
  SUB
  SATELLITE
}

enum PickUpStatus {
  CREATED
  SCHEDULED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
  RESCHEDULED
}
