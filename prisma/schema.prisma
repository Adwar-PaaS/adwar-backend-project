generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(uuid())
  email                   String          @unique
  password                String
  fullName                String
  phone                   String?
  status                  Status          @default(ACTIVE)
  roleId                  String
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  deletedAt               DateTime?
  createdTenants          Tenant[]        @relation("UserCreatedTenants")
  role                    Role            @relation(fields: [roleId], references: [id])
  memberships             UserTenant[]
  driverOrders            Order[]         @relation("DriverOrders")
  customerOrders          Order[]         @relation("CustomerOrders")
  customerBranches        Branch[]        @relation("CustomerBranch")
  auditLogs               AuditLog[]      @relation("UserAuditLogs")
  sentPickUpRequests      PickUpRequest[] @relation("PickUpRequester")
  responsedPickUpRequests PickUpRequest[] @relation("PickUpResponder")
  requestSenders          Request[]       @relation("RequestSender")
  requestResponses        Request[]       @relation("RequestResponder")
  sentNotifications       Notification[]  @relation("SentNotifications")
  receivedNotifications   Notification[]  @relation("ReceivedNotifications")
}

model Tenant {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  status      Status       @default(ACTIVE)
  logoUrl     String?
  address     String?
  email       String?      @unique
  phone       String?
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  roles       Role[]
  createdBy   User         @relation("UserCreatedTenants", fields: [createdById], references: [id])
  memberships UserTenant[]
  warehouses  Warehouse[]
}

model UserTenant {
  id          String           @id @default(uuid())
  isOwner     Boolean          @default(false)
  userId      String
  tenantId    String
  warehouseId String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  warehouse   Warehouse?       @relation(fields: [warehouseId], references: [id])
  permissions UserPermission[]

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([warehouseId])
}

model Role {
  id          String           @id @default(uuid())
  name        RoleName
  tenantId    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  tenant      Tenant?          @relation(fields: [tenantId], references: [id])
  permissions RolePermission[]
  users       User[]

  // @@unique([tenantId, name])
  @@index([tenantId])
}

model RolePermission {
  id         String       @id @default(uuid())
  roleId     String
  entityType EntityType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  actionType ActionType[] @default([])
  role       Role         @relation(fields: [roleId], references: [id])

  @@unique([roleId, entityType])
  @@index([roleId])
}

model UserPermission {
  id           String       @id @default(uuid())
  userTenantId String
  entityType   EntityType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  actionType   ActionType[] @default([])

  userTenant UserTenant @relation(fields: [userTenantId], references: [id])

  @@unique([userTenantId, entityType])
  @@index([userTenantId])
}

model Warehouse {
  id           String          @id @default(uuid())
  location     String
  capacity     Int
  currentStock Int             @default(0)
  status       WarehouseStatus @default(OPEN)
  tenantId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  name         String
  memberships  UserTenant[]
  tenant       Tenant          @relation(fields: [tenantId], references: [id])
  orders       Order[]

  @@index([tenantId])
}

model Order {
  id           String        @id @default(uuid())
  sku          String        @unique
  totalPrice   Float?
  quantity     Int
  failedReason FailedReason?

  deliveryLocation String? // client location
  merchantLocation String? // vendor location (seller)
  description      String?
  customerName     String?
  customerPhone    String?

  status OrderStatus @default(PENDING)

  paymentType           String?
  COD_Collection_Method String?
  COD_Amount            Float?
  notes                 String?

  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])

  driverId String?
  driver   User?   @relation("DriverOrders", fields: [driverId], references: [id])

  customerId String?
  customer   User?   @relation("CustomerOrders", fields: [customerId], references: [id])

  branchId String?
  branch   Branch? @relation("BranchOrders", fields: [branchId], references: [id])

  pickUpOrders PickUpOrder[]

  assignedAt DateTime?
  pickedAt   DateTime?

  deliveredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([warehouseId])
  @@index([status])
  @@index([createdAt])
}

model Notification {
  id          String  @id @default(uuid())
  senderId    String?
  recipientId String?

  title   String
  message String

  relatedId   String? // reference entity (orderId, requestId, tenantId)
  relatedType EntityType? // which entity this is about

  category NotificationCategory @default(INFO) // semantic classification
  isRead   Boolean              @default(false)

  channels     NotificationChannel[] @default([])
  deliveryMeta Json?
  priority     NotificationPriority  @default(MEDIUM)

  metadata  Json?
  broadcast Boolean   @default(false)
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender    User? @relation("SentNotifications", fields: [senderId], references: [id])
  recipient User? @relation("ReceivedNotifications", fields: [recipientId], references: [id])

  @@index([recipientId])
  @@index([relatedId, relatedType])
}

model Attachment {
  id          String         @id @default(uuid())
  url         String
  type        AttachmentType @default(IMAGE)
  relatedId   String
  relatedType RelatedType
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  @@index([relatedId, relatedType])
}

model PickUp {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders PickUpOrder[]

  requests PickUpRequest[]
}

model PickUpRequest {
  id          String  @id @default(uuid())
  pickupId    String
  requestedBy String
  respondedBy String?

  status RequestStatus @default(PENDING)

  pickup    PickUp @relation(fields: [pickupId], references: [id])
  requester User   @relation("PickUpRequester", fields: [requestedBy], references: [id])
  responder User?  @relation("PickUpResponder", fields: [respondedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pickupId])
  @@index([requestedBy])
  @@index([respondedBy])
}

model PickUpOrder {
  id       String @id @default(uuid())
  pickupId String
  orderId  String

  pickup PickUp @relation(fields: [pickupId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@unique([pickupId, orderId])
  @@index([pickupId])
  @@index([orderId])
}

model AuditLog {
  id          String     @id @default(uuid())
  userId      String?
  entityType  EntityType
  entityId    String?
  actionType  ActionType
  oldValues   Json?
  newValues   Json?
  description String?
  createdAt   DateTime   @default(now())

  user User? @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType])
  @@index([actionType])
}

model Request {
  id          String        @id @default(uuid())
  entityType  EntityType
  entityId    String?
  actionType  ActionType
  status      RequestStatus @default(PENDING)
  reason      String?
  responseMsg String?

  senderId    String
  responderId String?
  sender      User    @relation("RequestSender", fields: [senderId], references: [id])
  responder   User?   @relation("RequestResponder", fields: [responderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([senderId])
  @@index([responderId])
}

model Branch {
  id       String @id @default(uuid())
  name     String
  location String

  customerId String?
  customer   User?   @relation("CustomerBranch", fields: [customerId], references: [id])

  branchOrders Order[] @relation("BranchOrders")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum NotificationCategory {
  SYSTEM // technical/system-generated
  INFO // informational
  ACTION // requires user action
  WARNING // potential issue
  ERROR // failure or critical issue
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RelatedType {
  USER
  TENANT
  WAREHOUSE
  ORDER
  DRIVER
  ROLE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum OrderStatus {
  CREATED // FOR CUSTOMER WHEN CREATED ORDER BUT NOT SEND IT TO TENANT TO ARRPEOVED ON IT
  PENDING
  APPROVED
  ASSIGNED_FOR_PICKUP
  PICKED_UP
  RECEIVED_IN_WAREHOUSE
  STORED_ON_SHELVES
  READY_FOR_DISPATCH
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RESCHEDULED
  CANCELLED
  RETURNED_TO_OPERATION
  READY_TO_RETURN_TO_ORIGIN
  RETURNED_TO_ORIGIN
}

enum FailedReason {
  CUSTOMER_NOT_AVAILABLE
  WRONG_ADDRESS
  NO_ANSWER
  DAMAGED_PACKAGE
  OUT_OF_COVERAGE_AREA
  MOBILE_SWITCHED_OFF
  OTHER
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  DRIVER
  PACKER
  ACCOUNTANT
  PICKER
  OPERATION
  CUSTOMER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WarehouseStatus {
  OPEN
  EMPTY
  FULL
  CLOSED
  UNDER_MAINTENANCE
}

enum EntityType {
  USER
  TENANT
  WAREHOUSE
  ORDER
  DRIVER
  BRANCH
  ROLE
  DRIVER_ORDER
  TENANT_ORDER
  TENANT_CUSTOMER
  CUSTOMER_ORDER
  TENANT_WAREHOUSE
}

enum ActionType {
  ALL
  CREATE
  READ
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id        String    @id @default(cuid())
//   email     String    @unique
//   password  String
//   fullName  String
//   phone     String?
//   status    Status    @default(ACTIVE)
//   roleId    String
//   joinedAt  DateTime  @default(now())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   // Relations
//   role                   Role            @relation(fields: [roleId], references: [id])
//   createdTenants         Tenant[]        @relation("UserCreatedTenants")
//   memberships            UserTenant[]
//   addresses              UserAddress[]
//   customerOrders         Order[]         @relation("CustomerOrders")
//   pickUpDriver           PickUp[]        @relation("PickUpDriver")
//   customerBranches       Branch[]        @relation("CustomerBranch")
//   auditLogs              AuditLog[]      @relation("UserAuditLogs")
//   sentPickUpRequests     PickUpRequest[] @relation("PickUpRequester")
//   receivedPickUpRequests PickUpRequest[] @relation("PickUpResponder")
//   sentRequests           Request[]       @relation("RequestSender")
//   receivedRequests       Request[]       @relation("RequestResponder")
//   sentNotifications      Notification[]  @relation("SentNotifications")
//   receivedNotifications  Notification[]  @relation("ReceivedNotifications")
//   driverTrackings        Tracking[]      @relation("DriverTrackings")

//   @@index([email])
//   @@index([status])
//   @@index([deletedAt])
//   @@map("users")
// }

// model Tenant {
//   id          String    @id @default(cuid())
//   name        String
//   slug        String    @unique
//   status      Status    @default(ACTIVE)
//   logoUrl     String?
//   email       String?   @unique
//   phone       String?
//   createdById String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   deletedAt   DateTime?

//   // Relations
//   createdBy   User         @relation("UserCreatedTenants", fields: [createdById], references: [id], onDelete: Restrict)
//   roles       Role[]
//   branches    Branch[]
//   memberships UserTenant[]
//   warehouses  Warehouse[]
//   addresses   Address[]
//   // notifications Notification[] @relation("TenantNotifications")

//   @@index([createdById])
//   @@index([status])
//   @@index([slug])
//   @@index([deletedAt])
//   @@map("tenants")
// }

// model UserTenant {
//   id          String    @id @default(cuid())
//   userId      String
//   tenantId    String
//   warehouseId String?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   deletedAt   DateTime?

//   // Relations
//   tenant      Tenant           @relation(fields: [tenantId], references: [id])
//   user        User             @relation(fields: [userId], references: [id])
//   warehouse   Warehouse?       @relation(fields: [warehouseId], references: [id])
//   permissions UserPermission[]

//   @@unique([userId, tenantId])
//   @@index([tenantId])
//   @@index([warehouseId])
//   @@index([deletedAt])
//   @@map("user_tenants")
// }

// model Role {
//   id        String    @id @default(cuid())
//   name      RoleName  @default(CUSTOMER)
//   tenantId  String?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   // Relations
//   tenant      Tenant?          @relation(fields: [tenantId], references: [id])
//   permissions RolePermission[]
//   users       User[]

//   @@index([tenantId])
//   @@index([deletedAt])
//   @@map("roles")
// }

// model RolePermission {
//   id         String       @id @default(cuid())
//   roleId     String
//   entityType EntityType
//   actionType ActionType[] @default([])

//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   // Relations
//   role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

//   @@unique([roleId, entityType])
//   @@index([roleId])
//   @@index([entityType])
//   @@index([deletedAt])
//   @@map("role_permissions")
// }

// model UserPermission {
//   id           String       @id @default(cuid())
//   userTenantId String
//   entityType   EntityType
//   actionType   ActionType[] @default([])

//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   // Relations
//   userTenant UserTenant @relation(fields: [userTenantId], references: [id], onDelete: Cascade)

//   @@unique([userTenantId, entityType])
//   @@index([userTenantId])
//   @@index([entityType])
//   @@index([deletedAt])
//   @@map("user_permissions")
// }

// model Warehouse {
//   id           String          @id @default(cuid())
//   name         String
//   code         String          @unique // For easy identification
//   location     String?
//   capacity     Int
//   currentStock Int             @default(0)
//   status       WarehouseStatus @default(OPEN)
//   tenantId     String
//   addressId    String
//   managerId    String? // Warehouse manager
//   createdAt    DateTime        @default(now())
//   updatedAt    DateTime        @updatedAt
//   deletedAt    DateTime?

//   // Relations
//   tenant      Tenant       @relation(fields: [tenantId], references: [id])
//   address     Address?     @relation(fields: [addressId], references: [id])
//   memberships UserTenant[]
//   orders      Order[]

//   @@index([tenantId])
//   @@index([addressId])
//   @@index([status])
//   @@index([code])
//   @@index([deletedAt])
//   @@map("warehouses")
// }

// model Notification {
//   id           String                @id @default(cuid())
//   senderId     String?
//   recipientId  String?
//   title        String
//   message      String
//   relatedId    String?
//   relatedType  EntityType?
//   category     NotificationCategory  @default(INFO)
//   isRead       Boolean               @default(false)
//   channels     NotificationChannel[] @default([])
//   priority     NotificationPriority  @default(MEDIUM)
//   metadata     Json?
//   broadcast    Boolean               @default(false)
//   scheduled    Boolean               @default(false)
//   scheduledFor DateTime?
//   expiresAt    DateTime?
//   readAt       DateTime?
//   createdAt    DateTime              @default(now())
//   updatedAt    DateTime              @updatedAt
//   deletedAt    DateTime?

//   // Relations
//   sender    User? @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
//   recipient User? @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: SetNull)

//   @@index([recipientId, isRead])
//   @@index([broadcast])
//   @@index([relatedId, relatedType])
//   @@index([category])
//   @@index([scheduledFor])
//   @@index([expiresAt])
//   @@index([createdAt])
//   @@index([deletedAt])
//   @@map("notifications")
// }

// model Address {
//   id         String    @id @default(cuid())
//   label      String?
//   address1   String
//   address2   String?
//   district   String?
//   city       String
//   state      String?
//   country    String
//   postalCode String?
//   latitude   Float?
//   longitude  Float?
//   tenantId   String?
//   isActive   Boolean   @default(true)
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   deletedAt  DateTime?

//   // Relations
//   tenant               Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//   userAddresses        UserAddress[]
//   warehouses           Warehouse[]
//   branches             Branch[]
//   shipmentsAsSender    Shipment[]    @relation("SenderAddress")
//   shipmentsAsConsignee Shipment[]    @relation("ConsigneeAddress")

//   @@index([country, city])
//   @@index([tenantId])
//   @@index([isActive])
//   @@index([deletedAt])
//   @@map("addresses")
// }

// model UserAddress {
//   id        String      @id @default(cuid())
//   userId    String
//   addressId String
//   type      AddressType @default(HOME)
//   isPrimary Boolean     @default(false)
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @updatedAt
//   deletedAt DateTime?

//   // Relations
//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

//   @@unique([userId, addressId])
//   @@index([userId])
//   @@index([type])
//   @@index([isPrimary])
//   @@index([deletedAt])
//   @@map("user_addresses")
// }

// model Branch {
//   id         String       @id @default(cuid())
//   name       String
//   code       String?      @unique // Branch code for identification
//   status     BranchStatus @default(OPEN)
//   tenantId   String?
//   customerId String?
//   addressId  String
//   isMain     Boolean      @default(false)
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
//   deletedAt  DateTime?

//   // Relations
//   tenant       Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//   customer     User?   @relation("CustomerBranch", fields: [customerId], references: [id], onDelete: SetNull)
//   address      Address @relation(fields: [addressId], references: [id], onDelete: Restrict)
//   branchOrders Order[] @relation("BranchOrders")

//   @@index([tenantId])
//   @@index([customerId])
//   @@index([addressId])
//   @@index([status])
//   @@index([code])
//   @@index([deletedAt])
//   @@map("branches")
// }

// model Order {
//   id                  String        @id @default(cuid())
//   orderNumber         String        @unique // Human-readable order number
//   sku                 String        @unique
//   totalWeight         Float?
//   totalValue          Float?
//   specialInstructions String?
//   status              OrderStatus   @default(PENDING)
//   failedReason        FailedReason?
//   priority            OrderPriority @default(NORMAL)
//   customerId          String?
//   warehouseId         String?
//   branchId            String?
//   estimatedDelivery   DateTime?
//   deliveredAt         DateTime?
//   assignedAt          DateTime?
//   pickedAt            DateTime?
//   cancelledAt         DateTime?
//   createdAt           DateTime      @default(now())
//   updatedAt           DateTime      @updatedAt
//   deletedAt           DateTime?

//   // Relations
//   customer       User?           @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: SetNull)
//   warehouse      Warehouse?      @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
//   branch         Branch?         @relation("BranchOrders", fields: [branchId], references: [id], onDelete: SetNull)
//   payment        Payment?
//   pickUpOrders   PickUpOrder[]
//   shipmentOrders ShipmentOrder[]
//   tracking       Tracking[]
//   notes          OrderNote[]

//   @@index([sku])
//   @@index([warehouseId])
//   @@index([customerId])
//   @@index([status])
//   @@index([priority])
//   @@index([createdAt])
//   @@index([estimatedDelivery])
//   @@index([deletedAt])
//   @@map("orders")
// }

// model Payment {
//   id                     String        @id @default(cuid())
//   orderId                String        @unique
//   paymentMethod          PaymentMethod @default(CASH)
//   codAmount              Float?
//   shippingCost           Float         @default(0)
//   driverCost             Float         @default(0)
//   insuranceFees          Float         @default(0)
//   serviceFees            Float         @default(0)
//   creditFees             Float         @default(0)
//   extraFees              Float         @default(0)
//   vatAmount              Float         @default(0)
//   discountAmount         Float         @default(0)
//   totalAmount            Float
//   paidAmount             Float         @default(0)
//   remainingAmount        Float         @default(0)
//   paymentReferenceNumber String?
//   paymentCardType        String?
//   approvalCode           String?
//   transactionDate        DateTime?
//   transactionType        String?
//   transactionSource      String?
//   transactionPercentage  Float?
//   status                 PaymentStatus @default(PENDING)
//   dueDate                DateTime?
//   createdAt              DateTime      @default(now())
//   updatedAt              DateTime      @updatedAt
//   deletedAt              DateTime?

//   // Relations
//   order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   @@index([status])
//   @@index([paymentMethod])
//   @@index([dueDate])
//   @@index([createdAt])
//   @@index([deletedAt])
//   @@map("payments")
// }

// model Tracking {
//   id         String      @id @default(cuid())
//   orderId    String
//   driverId   String?
//   status     OrderStatus
//   location   String?
//   latitude   Float?
//   longitude  Float?
//   hub        String?
//   notes      String?
//   isPublic   Boolean     @default(true) // Can customer see this tracking update?
//   eventType  String? // Additional event classification
//   metadata   Json? // Additional tracking data
//   timestamp  DateTime    @default(now())
//   recordedBy String? // Who recorded this tracking event

//   // Relations
//   order  Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   driver User? @relation("DriverTrackings", fields: [driverId], references: [id], onDelete: SetNull)

//   @@index([orderId])
//   @@index([driverId])
//   @@index([status])
//   @@index([timestamp])
//   @@index([isPublic])
//   @@index([eventType])
//   @@map("tracking")
// }

// model OrderNote {
//   id        String   @id @default(cuid())
//   orderId   String
//   content   String
//   private   Boolean  @default(false)
//   authorId  String? // Who created the note
//   createdAt DateTime @default(now())

//   // Relations
//   order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   @@index([orderId])
//   @@index([authorId])
//   @@index([private])
//   @@index([createdAt])
//   @@map("order_notes")
// }

// model Attachment {
//   id           String         @id @default(cuid())
//   filename     String
//   originalName String
//   url          String
//   mimeType     String
//   fileSize     Int
//   type         AttachmentType @default(OTHER)
//   relatedId    String
//   relatedType  EntityType
//   metadata     Json?
//   uploadedBy   String?
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt
//   deletedAt    DateTime?

//   @@index([relatedId, relatedType])
//   @@index([type])
//   @@index([uploadedBy])
//   @@index([createdAt])
//   @@index([deletedAt])
//   @@map("attachments")
// }

// model PickUp {
//   id           String       @id @default(cuid())
//   code         String       @unique
//   status       PickUpStatus @default(CREATED)
//   scheduledFor DateTime?
//   completedAt  DateTime?
//   notes        String?
//   driverId     String?
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
//   deletedAt    DateTime?

//   // Relations
//   orders    PickUpOrder[]
//   requests  PickUpRequest[]
//   shipments Shipment[]
//   driver    User?           @relation("PickUpDriver", fields: [driverId], references: [id], onDelete: SetNull)

//   @@index([code])
//   @@index([status])
//   @@index([scheduledFor])
//   @@index([driverId])
//   @@index([createdAt])
//   @@index([deletedAt])
//   @@map("pickups")
// }

// model PickUpRequest {
//   id          String        @id @default(cuid())
//   pickupId    String
//   requestedBy String
//   respondedBy String?
//   status      RequestStatus @default(PENDING)
//   requestedAt DateTime      @default(now())
//   respondedAt DateTime?
//   notes       String?
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   deletedAt   DateTime?

//   // Relations
//   pickup    PickUp @relation(fields: [pickupId], references: [id], onDelete: Cascade)
//   requester User   @relation("PickUpRequester", fields: [requestedBy], references: [id], onDelete: Cascade)
//   responder User?  @relation("PickUpResponder", fields: [respondedBy], references: [id], onDelete: SetNull)

//   @@index([pickupId])
//   @@index([requestedBy])
//   @@index([respondedBy])
//   @@index([status])
//   @@index([requestedAt])
//   @@index([deletedAt])
//   @@map("pickup_requests")
// }

// model PickUpOrder {
//   id        String    @id @default(cuid())
//   pickupId  String
//   orderId   String
//   sequence  Int       @default(1)
//   createdAt DateTime  @default(now())
//   deletedAt DateTime?

//   // Relations
//   pickup PickUp @relation(fields: [pickupId], references: [id], onDelete: Cascade)
//   order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   @@unique([pickupId, orderId])
//   @@index([pickupId])
//   @@index([orderId])
//   @@index([sequence])
//   @@index([deletedAt])
//   @@map("pickup_orders")
// }

// model Shipment {
//   id                  String         @id @default(cuid())
//   shipmentNumber      String         @unique // Human-readable shipment number
//   pickupId            String?
//   originCountry       String
//   originCity          String
//   destinationCountry  String
//   destinationCity     String
//   serviceType         ServiceType    @default(STANDARD)
//   shipmentValue       Float          @default(0)
//   declaredValue       Float?
//   weight              Float
//   volumetricWeight    Float?
//   dimensions          Json? // length, width, height
//   numberOfItems       Int            @default(1)
//   senderAccountNumber String?
//   senderName          String
//   senderBusinessName  String?
//   senderPhone         String
//   consigneeName       String
//   consigneePhone1     String
//   consigneePhone2     String?
//   senderAddressId     String
//   consigneeAddressId  String
//   specialInstructions String?
//   insuranceRequired   Boolean        @default(false)
//   signatureRequired   Boolean        @default(false)
//   status              ShipmentStatus @default(PENDING)
//   estimatedDelivery   DateTime?
//   actualDelivery      DateTime?
//   createdAt           DateTime       @default(now())
//   updatedAt           DateTime       @updatedAt
//   deletedAt           DateTime?

//   // Relations
//   pickup           PickUp?         @relation(fields: [pickupId], references: [id], onDelete: SetNull)
//   senderAddress    Address         @relation("SenderAddress", fields: [senderAddressId], references: [id], onDelete: Restrict)
//   consigneeAddress Address         @relation("ConsigneeAddress", fields: [consigneeAddressId], references: [id], onDelete: Restrict)
//   shipmentOrders   ShipmentOrder[]

//   @@index([shipmentNumber])
//   @@index([pickupId])
//   @@index([status])
//   @@index([serviceType])
//   @@index([originCountry, originCity])
//   @@index([destinationCountry, destinationCity])
//   @@index([estimatedDelivery])
//   @@index([createdAt])
//   @@index([deletedAt])
//   @@map("shipments")
// }

// model ShipmentOrder {
//   id         String @id @default(cuid())
//   shipmentId String
//   orderId    String

//   // Relations
//   shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
//   order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   @@unique([shipmentId, orderId])
//   @@index([orderId])
//   @@index([shipmentId])
//   @@map("shipment_orders")
// }

// model AuditLog {
//   id          String     @id @default(cuid())
//   userId      String?
//   entityType  EntityType
//   entityId    String?
//   actionType  ActionType
//   oldValues   Json?
//   newValues   Json?
//   description String?
//   createdAt   DateTime   @default(now())

//   // Relations
//   user User? @relation("UserAuditLogs", fields: [userId], references: [id])

//   @@index([userId])
//   @@index([entityType, entityId])
//   @@index([actionType])
//   @@index([createdAt])
//   @@map("audit_logs")
// }

// model Request {
//   id          String          @id @default(cuid())
//   entityType  EntityType
//   entityId    String?
//   actionType  ActionType
//   status      RequestStatus   @default(PENDING)
//   reason      String?
//   responseMsg String?
//   priority    RequestPriority @default(MEDIUM)
//   senderId    String
//   responderId String?
//   expiresAt   DateTime?
//   processedAt DateTime?
//   createdAt   DateTime        @default(now())
//   updatedAt   DateTime        @updatedAt
//   deletedAt   DateTime?

//   // Relations
//   sender    User  @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
//   responder User? @relation("RequestResponder", fields: [responderId], references: [id], onDelete: SetNull)

//   @@index([entityType, entityId])
//   @@index([senderId])
//   @@index([responderId])
//   @@index([status])
//   @@index([priority])
//   @@index([expiresAt])
//   @@index([createdAt])
//   @@index([deletedAt])
//   @@map("requests")
// }

// // Enums
// enum Status {
//   ACTIVE
//   INACTIVE
//   SUSPENDED
// }

// enum AddressType {
//   HOME
//   OFFICE
//   WAREHOUSE
//   PICKUP
//   DELIVERY
//   OTHER
// }

// enum OrderPriority {
//   LOW
//   NORMAL
//   HIGH
//   URGENT
// }

// enum RequestPriority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

// enum PaymentMethod {
//   CASH
//   CARD
//   BANK_TRANSFER
//   DIGITAL_WALLET
//   COD
// }

// enum ServiceType {
//   STANDARD
//   EXPRESS
//   NEXT_DAY
//   SAME_DAY
//   ECONOMY
// }

// enum NotificationCategory {
//   SYSTEM
//   INFO
//   ACTION
//   WARNING
//   ERROR
//   MARKETING
// }

// enum NotificationChannel {
//   IN_APP
//   EMAIL
//   SMS
//   PUSH
//   WEBHOOK
// }

// enum NotificationPriority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

// enum RequestStatus {
//   PENDING
//   APPROVED
//   REJECTED
//   EXPIRED
// }

// enum AttachmentType {
//   IMAGE
//   DOCUMENT
//   VIDEO
//   AUDIO
//   SIGNATURE
//   INVOICE
//   RECEIPT
//   OTHER
// }

// enum OrderStatus {
//   CREATED
//   PENDING
//   APPROVED
//   ASSIGNED_FOR_PICKUP
//   PICKED_UP
//   RECEIVED_IN_WAREHOUSE
//   STORED_ON_SHELVES
//   READY_FOR_DISPATCH
//   OUT_FOR_DELIVERY
//   DELIVERED
//   FAILED
//   RESCHEDULED
//   CANCELLED
//   RETURNED_TO_OPERATION
//   READY_TO_RETURN_TO_ORIGIN
//   RETURNED_TO_ORIGIN
// }

// enum FailedReason {
//   CUSTOMER_NOT_AVAILABLE
//   WRONG_ADDRESS
//   NO_ANSWER
//   DAMAGED_PACKAGE
//   OUT_OF_COVERAGE_AREA
//   MOBILE_SWITCHED_OFF
//   CUSTOMER_REFUSED
//   INCOMPLETE_ADDRESS
//   SECURITY_ISSUE
//   OTHER
// }

// enum RoleName {
//   SUPER_ADMIN
//   ADMIN
//   DRIVER
//   PACKER
//   ACCOUNTANT
//   PICKER
//   OPERATION
//   CUSTOMER
//   WAREHOUSE_MANAGER
//   BRANCH_MANAGER
// }

// enum WarehouseStatus {
//   OPEN
//   EMPTY
//   FULL
//   CLOSED
//   UNDER_MAINTENANCE
// }

// enum EntityType {
//   USER
//   TENANT
//   WAREHOUSE
//   ORDER
//   DRIVER
//   ROLE
//   PICKUP_REQUEST
//   TENANT_ORDER
//   TENANT_CUSTOMER
//   CUSTOMER_ORDER
//   BRANCH
//   SHIPMENT
//   PAYMENT
//   NOTIFICATION
//   ADDRESS
//   PICKUP
//   TRACKING
// }

// enum ActionType {
//   ALL
//   CREATE
//   READ
//   UPDATE
//   DELETE
//   ACTIVATE
//   DEACTIVATE
//   APPROVE
//   REJECT
//   ASSIGN
//   COMPLETE
// }

// enum ShipmentStatus {
//   PENDING
//   DISPATCHED
//   IN_TRANSIT
//   OUT_FOR_DELIVERY
//   DELIVERED
//   FAILED
//   RETURNED
//   CANCELLED
// }

// enum BranchStatus {
//   OPEN
//   CLOSED
//   UNDER_MAINTENANCE
// }

// enum PaymentStatus {
//   PENDING
//   COMPLETED
//   FAILED
//   REFUNDED
//   PARTIALLY_PAID
// }

// enum PickUpStatus {
//   CREATED
//   SCHEDULED
//   IN_PROGRESS
//   COMPLETED
//   CANCELLED
//   FAILED
// }
